#!/bin/bash
# Database System Maintenance
# Purpose: Daily operational checks and maintenance for database systems

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print success messages
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Function to print error messages
print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Function to check database service status
check_db_service() {
    local service=$1
    if systemctl is-active --quiet $service; then
        echo -e "${GREEN}✓ $service is running${NC}"
        echo -e "Status: $(systemctl status $service --no-pager | grep 'Active:')"
        return 0
    else
        echo -e "${RED}✗ $service is not running${NC}"
        return 1
    fi
}

# Function to check database connection
check_db_connection() {
    local db_type=$1
    case $db_type in
        "postgresql")
            if su - postgres -c "psql -c '\l'" &>/dev/null; then
                echo -e "${GREEN}✓ PostgreSQL connection successful${NC}"
                return 0
            else
                echo -e "${RED}✗ PostgreSQL connection failed${NC}"
                return 1
            fi
            ;;
        "mariadb")
            if mariadb -e "SHOW DATABASES;" &>/dev/null; then
                echo -e "${GREEN}✓ MariaDB connection successful${NC}"
                return 0
            else
                echo -e "${RED}✗ MariaDB connection failed${NC}"
                return 1
            fi
            ;;
        "mongodb")
            if mongosh --eval "db.adminCommand('ping')" &>/dev/null; then
                echo -e "${GREEN}✓ MongoDB connection successful${NC}"
                return 0
            else
                echo -e "${RED}✗ MongoDB connection failed${NC}"
                return 1
            fi
            ;;
    esac
}

# Function to check disk usage
check_disk_usage() {
    echo -e "\n${BLUE}Disk Usage Information:${NC}"
    df -h /var/lib/postgresql 2>/dev/null || true
    df -h /var/lib/mysql 2>/dev/null || true
    df -h /var/lib/mongodb 2>/dev/null || true
}

# Function to backup databases
backup_databases() {
    local backup_dir="/var/backups/databases/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # PostgreSQL backup
    if systemctl is-active --quiet postgresql; then
        echo -e "\n${BLUE}Backing up PostgreSQL databases...${NC}"
        su - postgres -c "pg_dumpall > $backup_dir/postgresql_backup.sql"
        print_success "PostgreSQL backup completed"
    fi
    
    # MariaDB backup
    if systemctl is-active --quiet mariadb; then
        echo -e "\n${BLUE}Backing up MariaDB databases...${NC}"
        mariadb-dump --all-databases > "$backup_dir/mariadb_backup.sql"
        print_success "MariaDB backup completed"
    fi
    
    # MongoDB backup
    if systemctl is-active --quiet mongod; then
        echo -e "\n${BLUE}Backing up MongoDB databases...${NC}"
        mongodump --out "$backup_dir/mongodb_backup"
        print_success "MongoDB backup completed"
    fi
    
    echo -e "\n${GREEN}All backups saved to: $backup_dir${NC}"
}

# Function to optimize databases
optimize_databases() {
    # PostgreSQL vacuum
    if systemctl is-active --quiet postgresql; then
        echo -e "\n${BLUE}Optimizing PostgreSQL databases...${NC}"
        su - postgres -c "vacuumdb --all --analyze"
        print_success "PostgreSQL optimization completed"
    fi
    
    # MariaDB optimization
    if systemctl is-active --quiet mariadb; then
        echo -e "\n${BLUE}Optimizing MariaDB databases...${NC}"
        mariadb -e "OPTIMIZE TABLE mysql.db;"
        mariadb -e "OPTIMIZE TABLE mysql.user;"
        print_success "MariaDB optimization completed"
    fi
    
    # MongoDB optimization
    if systemctl is-active --quiet mongod; then
        echo -e "\n${BLUE}Optimizing MongoDB databases...${NC}"
        mongosh --eval "db.adminCommand({ compact: 'admin' })"
        print_success "MongoDB optimization completed"
    fi
}

# Show maintenance menu
show_maintenance_menu() {
    echo -e "\n${BLUE}Database System Maintenance Options:${NC}"
    echo -e "${GREEN}1)${NC} Check all database services"
    echo -e "${GREEN}2)${NC} Run database health checks"
    echo -e "${GREEN}3)${NC} View database logs"
    echo -e "${GREEN}4)${NC} Backup databases"
    echo -e "${GREEN}5)${NC} Restore from backup"
    echo -e "${GREEN}6)${NC} Optimize databases"
    echo -e "${GREEN}7)${NC} Monitor disk usage"
    echo -e "${GREEN}8)${NC} Restart database services"
    echo -e "${GREEN}9)${NC} Full system check"
    echo -e "${YELLOW}0)${NC} Exit"
    echo
}

# Function to handle menu selection
handle_menu_choice() {
    local choice=$1
    case $choice in
        1)
            echo -e "\n${YELLOW}Checking all database services...${NC}"
            check_db_service postgresql
            check_db_service mariadb
            check_db_service mongod
            ;;
        2)
            echo -e "\n${YELLOW}Running database health checks...${NC}"
            check_db_connection postgresql
            check_db_connection mariadb
            check_db_connection mongodb
            ;;
        3)
            echo -e "\n${YELLOW}Viewing recent database logs...${NC}"
            echo -e "\n${BLUE}PostgreSQL logs:${NC}"
            tail -n 10 /var/log/postgresql/postgresql-*.log 2>/dev/null || echo "No PostgreSQL logs found"
            echo -e "\n${BLUE}MariaDB logs:${NC}"
            tail -n 10 /var/log/mysql/error.log 2>/dev/null || echo "No MariaDB logs found"
            echo -e "\n${BLUE}MongoDB logs:${NC}"
            tail -n 10 /var/log/mongodb/mongod.log 2>/dev/null || echo "No MongoDB logs found"
            ;;
        4)
            backup_databases
            ;;
        5)
            echo -e "\n${YELLOW}Available backups:${NC}"
            ls -l /var/backups/databases/
            read -p "Enter backup timestamp to restore (YYYYMMDD_HHMMSS): " timestamp
            if [ -d "/var/backups/databases/$timestamp" ]; then
                echo -e "\n${YELLOW}Restoring databases from backup...${NC}"
                if [ -f "/var/backups/databases/$timestamp/postgresql_backup.sql" ]; then
                    su - postgres -c "psql -f /var/backups/databases/$timestamp/postgresql_backup.sql"
                fi
                if [ -f "/var/backups/databases/$timestamp/mariadb_backup.sql" ]; then
                    mariadb < "/var/backups/databases/$timestamp/mariadb_backup.sql"
                fi
                if [ -d "/var/backups/databases/$timestamp/mongodb_backup" ]; then
                    mongorestore "/var/backups/databases/$timestamp/mongodb_backup"
                fi
                echo -e "${GREEN}Restore completed${NC}"
            else
                echo -e "${RED}Backup not found${NC}"
            fi
            ;;
        6)
            optimize_databases
            ;;
        7)
            check_disk_usage
            ;;
        8)
            echo -e "\n${YELLOW}Restarting database services...${NC}"
            systemctl restart postgresql
            systemctl restart mariadb
            systemctl restart mongod
            echo -e "${GREEN}Services restarted${NC}"
            ;;
        9)
            echo -e "\n${YELLOW}Running full system check...${NC}"
            echo -e "\n${BLUE}1. Service Status:${NC}"
            check_db_service postgresql
            check_db_service mariadb
            check_db_service mongod
            
            echo -e "\n${BLUE}2. Connection Tests:${NC}"
            check_db_connection postgresql
            check_db_connection mariadb
            check_db_connection mongodb
            
            echo -e "\n${BLUE}3. Disk Usage:${NC}"
            check_disk_usage
            
            echo -e "\n${BLUE}4. Log Analysis:${NC}"
            for db in postgresql mariadb mongodb; do
                case $db in
                    postgresql)
                        echo -e "\nPostgreSQL errors in last 24h:"
                        grep -i "error" /var/log/postgresql/postgresql-*.log 2>/dev/null | tail -n 5 || echo "No errors found"
                        ;;
                    mariadb)
                        echo -e "\nMariaDB errors in last 24h:"
                        grep -i "error" /var/log/mysql/error.log 2>/dev/null | tail -n 5 || echo "No errors found"
                        ;;
                    mongodb)
                        echo -e "\nMongoDB errors in last 24h:"
                        grep -i "error" /var/log/mongodb/mongod.log 2>/dev/null | tail -n 5 || echo "No errors found"
                        ;;
                esac
            done
            ;;
        0)
            echo -e "${GREEN}Exiting maintenance script...${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid option. Please try again.${NC}"
            return 1
            ;;
    esac
    return 0
}

# Print header
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}      DATABASE SYSTEM MAINTENANCE      ${NC}"
echo -e "${BLUE}========================================${NC}"

# Main loop
while true; do
    show_maintenance_menu
    read -p "Select an option [0-9]: " choice
    handle_menu_choice "$choice"
    [ $? -eq 0 ] && echo -e "\nPress Enter to continue..." && read
done
